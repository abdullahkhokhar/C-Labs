Script started on Tue 15 Jan 2019 05:49:17 PM EST
khokha59@dh2020pc03:~/209_repo/t02$ gdbv[K overflow
GNU gdb (Ubuntu 7.11.1-0ubuntu1~16.5) 7.11.1
Copyright (C) 2016 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
<http://www.gnu.org/software/gdb/documentation/>.
For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from overflow...done.
(gdb) break maiun[K[Kn[K[Kin 
Breakpoint 1 at 0x40062e: file overflow.c, line 6.
(gdb) run
Starting program: /student/khokha59/209_repo/t02/overflow 

Breakpoint 1, main () at overflow.c:6
6	int main() {
(gdb) display after
1: after = {4196608, 0, 4195632, 0}
(gdb) next
7	    int index = 0;
1: after = {4196608, 0, 4195632, 0}
(gdb) next
9	    int before[SIZE] = {10, 10, 10, 10};
1: after = {4196608, 0, 4195632, 0}
(gdb) next
10	    int a[SIZE] = {0, 0, 0, 0};
1: after = {4196608, 0, 4195632, 0}
(gdb) ls[Kist
5	
6	int main() {
7	    int index = 0;
8	    int i;
9	    int before[SIZE] = {10, 10, 10, 10};
10	    int a[SIZE] = {0, 0, 0, 0};
11	    int after[SIZE] = {10, 10, 10, 10};
12	
13	    printf("Address of the variables:\n");
14	    for (index = 0; index < SIZE; index++) {
(gdb) break 36
Breakpoint 2 at 0x40082f: file overflow.c, line 36.
(gdb) continue
Continuing.
Address of the variables:
7fffffffe9c0 -> &after[0]
7fffffffe9c4 -> &after[1]
7fffffffe9c8 -> &after[2]
7fffffffe9cc -> &after[3]
7fffffffe9b0 -> &a[0]
7fffffffe9b4 -> &a[1]
7fffffffe9b8 -> &a[2]
7fffffffe9bc -> &a[3]
7fffffffe9a0 -> &before[0]
7fffffffe9a4 -> &before[1]
7fffffffe9a8 -> &before[2]
7fffffffe9ac -> &before[3]
7fffffffe99c -> &i
7fffffffe998 -> &index

Initial values:
i = 0
before = {10, 10, 10, 10}
a = {0, 0, 0, 0}
after = {10, 10, 10, 10}


Breakpoint 2, main () at overflow.c:36
36	    for (i = 0; i < OVERFLOW; i++) {
1: after = {10, 10, 10, 10}
(gdb) next
37	        a[i] = i * 10;
1: after = {10, 10, 10, 10}
(gdb) next
38	        printf("i = %d\n", i);
1: after = {10, 10, 10, 10}
(gdb) next
i = 0
39	        printf("before = {%d, %d, %d, %d}\n", before[0], before[1], before[2], before[3]);
1: after = {10, 10, 10, 10}
(gdb) next
before = {10, 10, 10, 10}
40	        printf("a = {%d, %d, %d, %d}\n", a[0], a[1], a[2], a[3]);
1: after = {10, 10, 10, 10}
(gdb) next
a = {0, 0, 0, 0}
41	        printf("after = {%d, %d, %d, %d}\n", after[0], after[1], after[2], after[3]);
1: after = {10, 10, 10, 10}
(gdb) next
after = {10, 10, 10, 10}
36	    for (i = 0; i < OVERFLOW; i++) {
1: after = {10, 10, 10, 10}
(gdb) next
37	        a[i] = i * 10;
1: after = {10, 10, 10, 10}
(gdb) next
38	        printf("i = %d\n", i);
1: after = {10, 10, 10, 10}
(gdb) next
i = 1
39	        printf("before = {%d, %d, %d, %d}\n", before[0], before[1], before[2], before[3]);
1: after = {10, 10, 10, 10}
(gdb) next
before = {10, 10, 10, 10}
40	        printf("a = {%d, %d, %d, %d}\n", a[0], a[1], a[2], a[3]);
1: after = {10, 10, 10, 10}
(gdb) next
a = {0, 10, 0, 0}
41	        printf("after = {%d, %d, %d, %d}\n", after[0], after[1], after[2], after[3]);
1: after = {10, 10, 10, 10}
(gdb) next
after = {10, 10, 10, 10}
36	    for (i = 0; i < OVERFLOW; i++) {
1: after = {10, 10, 10, 10}
(gdb) next
37	        a[i] = i * 10;
1: after = {10, 10, 10, 10}
(gdb) next
38	        printf("i = %d\n", i);
1: after = {10, 10, 10, 10}
(gdb) next
i = 2
39	        printf("before = {%d, %d, %d, %d}\n", before[0], before[1], before[2], before[3]);
1: after = {10, 10, 10, 10}
(gdb) next
before = {10, 10, 10, 10}
40	        printf("a = {%d, %d, %d, %d}\n", a[0], a[1], a[2], a[3]);
1: after = {10, 10, 10, 10}
(gdb) next
a = {0, 10, 20, 0}
41	        printf("after = {%d, %d, %d, %d}\n", after[0], after[1], after[2], after[3]);
1: after = {10, 10, 10, 10}
(gdb) next
after = {10, 10, 10, 10}
36	    for (i = 0; i < OVERFLOW; i++) {
1: after = {10, 10, 10, 10}
(gdb) next
37	        a[i] = i * 10;
1: after = {10, 10, 10, 10}
(gdb) next
38	        printf("i = %d\n", i);
1: after = {10, 10, 10, 10}
(gdb) next
i = 3
39	        printf("before = {%d, %d, %d, %d}\n", before[0], before[1], before[2], before[3]);
1: after = {10, 10, 10, 10}
(gdb) next
before = {10, 10, 10, 10}
40	        printf("a = {%d, %d, %d, %d}\n", a[0], a[1], a[2], a[3]);
1: after = {10, 10, 10, 10}
(gdb) next
a = {0, 10, 20, 30}
41	        printf("after = {%d, %d, %d, %d}\n", after[0], after[1], after[2], after[3]);
1: after = {10, 10, 10, 10}
(gdb) next
after = {10, 10, 10, 10}
36	    for (i = 0; i < OVERFLOW; i++) {
1: after = {10, 10, 10, 10}
(gdb) next
37	        a[i] = i * 10;
1: after = {10, 10, 10, 10}
(gdb) next
38	        printf("i = %d\n", i);
1: after = {40, 10, 10, 10}
(gdb) print &(after[0])
$1 = (int *) 0x7fffffffe9c0
(gdb) print &(a[4])
$2 = (int *) 0x7fffffffe9c0
(gdb) quit
A debugging session is active.

	Inferior 1 [process 16884] will be killed.

Quit anyway? (y or n) y
khokha59@dh2020pc03:~/209_repo/t02$ exit
exit

Script done on Tue 15 Jan 2019 05:57:22 PM EST
